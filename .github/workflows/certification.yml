# ------------------------------------------------------------
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------

name: Stable Components Certification Tests

on:
  repository_dispatch:
    types: [certification-test]
  workflow_dispatch:
  schedule:
    - cron: '25 */8 * * *'
  push:
    branches:
      - 'release-*'
  pull_request:
    branches:
      # TODO: REMOVE "master" BEFORE MERGING
      - 'master'
      - 'release-*'

env:
  # Only specify a major version, such as 1.20
  GO_VERSION: '1.19'

jobs:
  # Based on whether this is a PR or a scheduled run, we will run a different
  # subset of the certification tests. This allows all the tests not requiring
  # secrets to be executed on pull requests.
  generate-matrix:
    runs-on: ubuntu-22.04
    steps:
    - name: Parse repository_dispatch payload
      if: github.event_name == 'repository_dispatch'
      working-directory: ${{ github.workspace }}
      run: |
        if [ ${{ github.event.client_payload.command }} = "ok-to-test" ]; then
          echo "CHECKOUT_REF=${{ github.event.client_payload.pull_head_ref }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.client_payload.issue.number }}" >> $GITHUB_ENV
        fi
    - name: Check out code
      uses: actions/checkout@v3
      with:
        repository: ${{ env.CHECKOUT_REPO }}
        ref: ${{ env.CHECKOUT_REF }}

    - name: Generate test matrix
      id: generate-matrix
      env:
        VAULT_NAME: ${{ secrets.AZURE_KEYVAULT }}
      run: |
        if [ -z "$VAULT_NAME" ]; then
          # Do not include cloud tests when credentials are not available
          node .github/scripts/test-info.mjs certification false
        else
          # Include cloud tests
          node .github/scripts/test-info.mjs certification true
        fi
    - name: Create PR comment
      if: env.PR_NUMBER != ''
      uses: artursouza/sticky-pull-request-comment@da9e86aa2a80e4ae3b854d251add33bd6baabcba
      with:
        header: ${{ github.run_id }}
        number: ${{ env.PR_NUMBER }}
        GITHUB_TOKEN: ${{ secrets.DAPR_BOT_TOKEN }}
        message: |
          # Components certification test
          ðŸ”— **[Link to Action run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**
          Commit ref: ${{ env.CHECKOUT_REF }}
    outputs:
      test-matrix: ${{ steps.generate-matrix.outputs.test-matrix }}

  certification:
    name: ${{ matrix.component }} certification
    runs-on: ubuntu-22.04
    env:
      UNIQUE_ID: ${{github.run_id}}-${{github.run_attempt}}
    defaults:
      run:
        shell: bash

    needs: 
      - generate-matrix

    strategy:
      fail-fast: false # Keep running even if one component fails
      matrix: 
        include: ${{ fromJson(needs.generate-matrix.outputs.test-matrix) }}

    steps:
    - name: Set default payload repo and ref
      run: |
        echo "CHECKOUT_REPO=${{ github.repository }}" >> $GITHUB_ENV
        echo "CHECKOUT_REF=${{ github.ref }}" >> $GITHUB_ENV
    - name: Parse repository_dispatch payload
      if: github.event_name == 'repository_dispatch'
      run: |
        if [ ${{ github.event.client_payload.command }} = "ok-to-test" ]; then
          echo "CHECKOUT_REPO=${{ github.event.client_payload.pull_head_repo }}" >> $GITHUB_ENV
          echo "CHECKOUT_REF=${{ github.event.client_payload.pull_head_ref }}" >> $GITHUB_ENV
        fi
    - name: Check out code
      uses: actions/checkout@v3
      with:
        repository: ${{ env.CHECKOUT_REPO }}
        ref: ${{ env.CHECKOUT_REF }}

    - name: Configure environment
      run: |
        # Output file
        echo "TEST_OUTPUT_FILE_PREFIX=$GITHUB_WORKSPACE/test_report" >> $GITHUB_ENV
        # Certification test and source path
        TEST_COMPONENT=$(echo "${{ matrix.component }}" | sed -E 's/\./\//g')
        echo "TEST_PATH=tests/certification/${TEST_COMPONENT}" >> $GITHUB_ENV
        SOURCE_PATH="github.com/dapr/components-contrib/${TEST_COMPONENT}"
        echo "SOURCE_PATH=$SOURCE_PATH" >> $GITHUB_ENV
        # converts slashes to dots in this string, so that it doesn't consider them sub-folders
        SOURCE_PATH_LINEAR=$(echo "$SOURCE_PATH" |sed 's#/#\.#g')
        echo "SOURCE_PATH_LINEAR=$SOURCE_PATH_LINEAR" >> $GITHUB_ENV
        # Current time (used by Terraform)
        echo "CURRENT_TIME=$(date --rfc-3339=date)" >> ${GITHUB_ENV}
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      if: matrix.required-secrets != ''

    # Set this GitHub secret to your KeyVault, and grant the KeyVault policy to your Service Principal:
    #    az keyvault set-policy -n $AZURE_KEYVAULT --secret-permissions get list --spn $SPN_CLIENT_ID
    # Using az cli to query keyvault as Azure/get-keyvault-secrets@v1 is deprecated
    - name: Setup secrets
      if: matrix.required-secrets != ''
      env:
        VAULT_NAME: ${{ secrets.AZURE_KEYVAULT }}
      run: |
        secrets="${{ matrix.required-secrets }}"
        for secretName in $(echo -n $secrets | tr ',' ' '); do
          value=$(az keyvault secret show \
            --name $secretName \
            --vault-name $VAULT_NAME \
            --query value \
            --output tsv)
          echo "::add-mask::$value"
          echo "$secretName=$value" >> $GITHUB_OUTPUT
          echo "$secretName=$value" >> $GITHUB_ENV
        done
    # Download the required certificates into files, and set env var pointing to their names
    - name: Setup certs
      if: matrix.required-certs != ''
      working-directory: ${{ env.TEST_PATH }}
      run: |
        for CERT_NAME in $(echo "${{ matrix.required-certs }}" | sed 's/,/ /g'); do
          CERT_FILE=$(mktemp --suffix .pfx)
          echo "Downloading cert $CERT_NAME into file $CERT_FILE"
          rm $CERT_FILE && \
            az keyvault secret download --vault-name ${{ secrets.AZURE_KEYVAULT }} --name $CERT_NAME --encoding base64 --file $CERT_FILE
          echo 'Setting $CERT_NAME to' "$CERT_FILE"
          echo "$CERT_NAME=$CERT_FILE" >> $GITHUB_ENV
        done
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      if: matrix.require-terraform == 'true'

    - name: Set Cloudflare env vars
      if: matrix.require-cloudflare-credentials == 'true'
      run: |
        echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV
        echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
    - name: Set AWS env vars
      if: matrix.require-aws-credentials == 'true'
      run: |
        echo "AWS_REGION=us-west-1" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
    - name: Configure AWS Credentials
      # TODO: Remove "v1-node16" when v2 is released
      # See: https://github.com/aws-actions/configure-aws-credentials/issues/489
      uses: aws-actions/configure-aws-credentials@v1-node16
      if: matrix.require-aws-credentials == 'true'
      with:
        aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY }}"
        aws-secret-access-key: "${{ secrets.AWS_SECRET_KEY }}"
        aws-region: "${{ env.AWS_REGION }}"

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '^${{ env.GO_VERSION }}'

    - name: Download Go dependencies
      working-directory: ${{ env.TEST_PATH }}
      run: |
        go mod download
        go install gotest.tools/gotestsum@latest